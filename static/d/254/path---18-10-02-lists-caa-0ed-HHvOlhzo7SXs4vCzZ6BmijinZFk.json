{"data":{"site":{"siteMetadata":{"title":"Life Of Py","author":"Amey Khairnar"}},"markdownRemark":{"id":"4cf617e5-f50a-50ba-bc9c-fb5ecf29476c","excerpt":"We went over  lists in python  on 28th Sept 2018. Things discussed: lists list generators list methods list splicing Code  for the meetingâ€¦","html":"<p>We went over <a href=\"https://docs.python.org/3/tutorial/datastructures.html\">lists in python</a> on 28th Sept 2018.</p>\n<p>Things discussed:</p>\n<ul>\n<li>lists</li>\n<li>list generators</li>\n<li>list methods</li>\n<li>list splicing</li>\n</ul>\n<p><br><br></p>\n<h5><a href=\"/list-f20f9b856e7a1c4df9f17e64819b7e29.py\">Code</a> for the meeting (same as below)</h5>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">example1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># Python Lists are similar to arrays in C and vectors in C++</span>\n\t<span class=\"token comment\"># but they are a category of \"collection\".</span>\n\t\n\tthree <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\t\n\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">]</span>\n\ta<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"zero\"</span>\n\t<span class=\"token comment\"># Unlike strings in python (immutable character lists)</span>\n\t<span class=\"token comment\"># lists are mutable, which means changable.</span>\n\t\n\t<span class=\"token comment\"># Lists in Python are not type restricted like arrays in C and</span>\n\t<span class=\"token comment\"># C++, so in that way they differ. For example, list 'a' above</span>\n\t<span class=\"token comment\"># is comprised of sublist, an integer, a string,</span>\n\t<span class=\"token comment\"># the value of variable 'three', a float, a (math) expression,</span>\n\t<span class=\"token comment\"># and the character (string with length 1) '6'.</span>\n\t<span class=\"token comment\"># All are valid.</span>\n\t\n\tb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n\t\n\t<span class=\"token comment\"># SOMETIMES faster than map or for loop, probably most of the time.</span>\n\tc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\tc <span class=\"token operator\">=</span> b\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(b == c) -> '</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\"># True, because the length (size in some languages)</span>\n\t\t<span class=\"token comment\"># AND the elements are all equal.</span>\n\t\t<span class=\"token comment\"># The \"==\" operator in Python compares logical or mathematical</span>\n\t\t<span class=\"token comment\"># equivalence.</span>\n\t\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(b is c) ->'</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">is</span> c<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\"># NOT (usually) True, ie almost always False</span>\n\t\t<span class=\"token comment\"># (Rely on this being false)</span>\n\t\t<span class=\"token comment\"># The \"is\" operator compares two objects' memory addresses/IDs,</span>\n\t\t<span class=\"token comment\"># ie, if \"b is c\" == True, then b and c are not just equal,</span>\n\t\t<span class=\"token comment\"># but the SAME object in memory.</span>\n\td <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\"># Creates a list of squares from 0^2 to 10^2.</span>\n\t\n\te <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\"># Creates a list of squares from 0^2 to 49^2 IF the square is a multiple of 5.</span>\n\t\n\tf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\"># A more complicated example.  You can even use multiple variables/for</span>\n\t<span class=\"token comment\"># statements, eg for x and for y, still in addition to a conditional at the end.</span>\n\t\n\tg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token string\">'THIS IS A STRING'</span> <span class=\"token keyword\">if</span> x <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\"># Python will even loop through characters in a string in list comprehensions.</span>\n\t\n\t<span class=\"token comment\">#This just prints all of the above lists.</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'\\n\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lmethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\">### List methods:</span>\n\t\n\texample <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">]</span>\n\t\n\t<span class=\"token comment\"># \"pushes\" arguments onto the end of a list</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">,</span> <span class=\"token string\">'then append 7: '</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\texample<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">)</span> <span class=\"token comment\">###> ['first', 7]</span>\n\t\n\t<span class=\"token comment\"># extends list with another iterable</span>\n\t<span class=\"token comment\"># DIFFERENT than concatenation.</span>\n\t<span class=\"token comment\"># for example:</span>\n\t<span class=\"token comment\"># lista + listb will concatenate the lists, like lista.extend(listb)</span>\n\t<span class=\"token comment\"># however to extend by the values in a generator, for example</span>\n\t<span class=\"token comment\"># one must use 'lista.extend(generatora)', otherwise Python will</span>\n\t<span class=\"token comment\"># insert the entire generator object into the end of 'lista'.</span>\n\t\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">,</span> <span class=\"token string\">'then extend with generator: '</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\texample<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token comment\"># Other methods:</span>\n\t\n\texample<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'inserted at position 0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># .insert(position, value)</span>\n\t<span class=\"token comment\"># insert is IN PLACE</span>\n\texample<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># removes the first instance of 1st arg value</span>\n\t<span class=\"token comment\"># raises error if value is not present</span>\n\texample<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># .pop([n])  pops nth element, if empty, </span>\n\t\t\t       <span class=\"token comment\"># pops last</span>\n\texample<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\"># clears list IN PLACE</span>\n\texample<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ignore, just resetting 'example' with values.</span>\n\texample<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># .index(value[, start[, end]])</span>\n\texample<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># returns quantity of instances of arg value </span>\n\t\t\t       <span class=\"token comment\"># in the list</span>\n\texample<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># sorts list IN PLACE </span>\n\t\t\t       <span class=\"token comment\">#(can add optional 'key=key' / 'reverse=True')</span>\n\texample<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># reverses the list IN PLACE</span>\n\texample<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># returns SHALLOW COPY of list</span>\n\texample<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\"># list splicing:</span>\n\t<span class=\"token comment\"># example[x:y:z]   x = start, y = stop (EXCLUSIVE), z = step</span>\n\texample<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>          <span class=\"token comment\"># returns a COPY of reversed list</span>\n\t<span class=\"token comment\"># del example[0]       # \"pops\" index 0 WITHOUT returning the value</span>\n\t<span class=\"token comment\"># replace:</span>\n\t<span class=\"token comment\"># example[index of old value] = newvalue</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">mx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tmatrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t  <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t  <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\ttransposed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> matrix<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> transposed<span class=\"token punctuation\">]</span>\n\t\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">generators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># same general syntax as list comprehensions, except wrapped in</span>\n\t<span class=\"token comment\"># parentheses () instead of square brackets []</span>\n\t<span class=\"token comment\"># can get complex when using yield and async (advanced)</span>\n\t\n\t<span class=\"token comment\"># explain iterable vs iterator</span>\n\t<span class=\"token comment\"># iter() function converts object into iterator object</span>\n\t<span class=\"token comment\"># next() function is called on an interator to iterate </span>\n\t<span class=\"token comment\"># to the next element.</span>\n\t<span class=\"token comment\"># StopIteration exception raised when no more elements to iterate.</span>\n\t\n\texample <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># this prints the __repr__ attribute, or \"string</span>\n\t\t\t<span class=\"token comment\"># representation\" of an object.</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>example<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token comment\"># and we still haven't covered Tuples, Sequenes, Sets, and all the other types</span>\n<span class=\"token comment\"># of Collections!</span>\n\nselection <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\tselection <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Choose a function: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selection <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">break</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Lists in Python","date":"October 02, 2018"}}},"pageContext":{"slug":"/18-10-02 Lists/","previous":{"fields":{"slug":"/18-10-01 Welcome/"},"frontmatter":{"title":"Welcome"}},"next":null}}